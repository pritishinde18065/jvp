import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class LambdaStreamOptionalDemo {
    public static void main(String[] args) {
        // Sample list of integers
        List<Integer> numbers = List.of(10, 15, 20, 25, 30, 35, 40);

        // Demonstrating Lambda Expressions with a simple print
        System.out.println("Original Numbers:");
        numbers.forEach(num -> System.out.println(num));

        // Filter: Keep only even numbers
        List<Integer> evenNumbers = numbers.stream()
                .filter(num -> num % 2 == 0) // Lambda expression for filter
                .collect(Collectors.toList());

        System.out.println("\nEven Numbers:");
        evenNumbers.forEach(System.out::println);

        // Map: Square each number
        List<Integer> squaredNumbers = numbers.stream()
                .map(num -> num * num) // Lambda expression for map
                .collect(Collectors.toList());

        System.out.println("\nSquared Numbers:");
        squaredNumbers.forEach(System.out::println);

        // Reduce: Sum of all numbers
        int sum = numbers.stream()
                .reduce(0, (a, b) -> a + b); // Lambda expression for reduce

        System.out.println("\nSum of All Numbers:");
        System.out.println(sum);

        // Optional: Find the first number greater than 25
        Optional<Integer> firstGreaterThan25 = numbers.stream()
                .filter(num -> num > 25) // Lambda expression for filter
                .findFirst();

        System.out.println("\nFirst Number Greater Than 25:");
        firstGreaterThan25.ifPresentOrElse(
                System.out::println,
                () -> System.out.println("No number found greater than 25")
        );

        // Combining operations: Filter, Map, and Collect
        List<String> result = numbers.stream()
                .filter(num -> num % 2 != 0) // Keep odd numbers
                .map(num -> "Odd Number: " + num) // Map to a string
                .collect(Collectors.toList());

        System.out.println("\nOdd Numbers as Strings:");
        result.forEach(System.out::println);
    }
}



run javac LambdaStreamOptionalDemo.java
java LambdaStreamOptionalDemo







from functools import reduce

def main():
    # Sample list of integers
    numbers = [10, 15, 20, 25, 30, 35, 40]

    # Lambda Expressions: Print each number
    print("Original Numbers:")
    list(map(lambda num: print(num), numbers))

    # Filter: Keep only even numbers
    even_numbers = list(filter(lambda num: num % 2 == 0, numbers))
    print("\nEven Numbers:")
    print(even_numbers)

    # Map: Square each number
    squared_numbers = list(map(lambda num: num ** 2, numbers))
    print("\nSquared Numbers:")
    print(squared_numbers)

    # Reduce: Sum of all numbers
    total_sum = reduce(lambda a, b: a + b, numbers)
    print("\nSum of All Numbers:")
    print(total_sum)

    # Optional-like: Find the first number greater than 25
    first_greater_than_25 = next((num for num in numbers if num > 25), None)
    print("\nFirst Number Greater Than 25:")
    if first_greater_than_25 is not None:
        print(first_greater_than_25)
    else:
        print("No number found greater than 25")

    # Combining operations: Filter, Map
    odd_number_strings = list(
        map(lambda num: f"Odd Number: {num}", filter(lambda num: num % 2 != 0, numbers))
    )
    print("\nOdd Numbers as Strings:")
    print(odd_number_strings)


if __name__ == "__main__":
    main()
