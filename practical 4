import java.util.*;
import java.util.stream.Collectors;

public class LambdaOptionalStreamsDemo {

    public static void main(String[] args) {
        // Example list of integers
        List<Integer> numbers = Arrays.asList(10, 15, 20, 25, 30, 35, 40);

        System.out.println("Original List: " + numbers);

        // 1. Filter: Get only even numbers using Streams and Lambda
        List<Integer> evenNumbers = numbers.stream()
                .filter(n -> n % 2 == 0) // Lambda expression for filtering even numbers
                .collect(Collectors.toList());
        System.out.println("Even Numbers: " + evenNumbers);

        // 2. Map: Multiply each number by 2 using Streams and Lambda
        List<Integer> doubledNumbers = numbers.stream()
                .map(n -> n * 2) // Lambda expression for mapping
                .collect(Collectors.toList());
        System.out.println("Doubled Numbers: " + doubledNumbers);

        // 3. Reduce: Find the sum of all numbers using Streams and Lambda
        int sum = numbers.stream()
                .reduce(0, (a, b) -> a + b); // Lambda expression for reducing (adding numbers)
        System.out.println("Sum of Numbers: " + sum);

        // Optional Example: Check and retrieve a number greater than 25
        Optional<Integer> optionalNumber = numbers.stream()
                .filter(n -> n > 25) // Filter for numbers greater than 25
                .findFirst(); // Get the first number that matches the condition

        // Print optional value if present
        optionalNumber.ifPresentOrElse(
                n -> System.out.println("First Number Greater Than 25: " + n),
                () -> System.out.println("No Number Greater Than 25 Found")
        );

        // Combining operations: Filter, Map, and Reduce
        int combinedResult = numbers.stream()
                .filter(n -> n % 2 != 0) // Keep only odd numbers
                .map(n -> n * 3) // Multiply each by 3
                .reduce(0, Integer::sum); // Sum them up
        System.out.println("Sum of Odd Numbers Multiplied by 3: " + combinedResult);
    }
}




run:javac LambdaOptionalStreamsDemo.java
java LambdaOptionalStreamsDemo






from typing import Optional
from functools import reduce

# Example list of integers
numbers = [10, 15, 20, 25, 30, 35, 40]

print("Original List:", numbers)

# 1. Filter: Get only even numbers using Lambda
even_numbers = list(filter(lambda n: n % 2 == 0, numbers))
print("Even Numbers:", even_numbers)

# 2. Map: Multiply each number by 2 using Lambda
doubled_numbers = list(map(lambda n: n * 2, numbers))
print("Doubled Numbers:", doubled_numbers)

# 3. Reduce: Find the sum of all numbers using Lambda
sum_of_numbers = reduce(lambda a, b: a + b, numbers)
print("Sum of Numbers:", sum_of_numbers)

# Optional-like example: Check and retrieve a number greater than 25
optional_number: Optional[int] = next((n for n in numbers if n > 25), None)

if optional_number is not None:
    print("First Number Greater Than 25:", optional_number)
else:
    print("No Number Greater Than 25 Found")

# Combining operations: Filter, Map, and Reduce
combined_result = reduce(
    lambda a, b: a + b,
    map(lambda n: n * 3, filter(lambda n: n % 2 != 0, numbers)),
    0
)
print("Sum of Odd Numbers Multiplied by 3:", combined_result)



run:python lambda_optional_streams_demo.py
