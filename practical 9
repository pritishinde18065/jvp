class Animal:
    """Base class to represent generic animals."""
    def __init__(self, name):
        self.name = name

    def sound(self):
        """Method to be overridden by subclasses."""
        return "Some generic animal sound"

    def info(self):
        """Demonstrates method overloading using default arguments."""
        return f"Name: {self.name}"


class Dog(Animal):
    """Derived class to represent a Dog, inheriting from Animal."""
    def __init__(self, name, breed):
        super().__init__(name)  # Call the parent class initializer
        self.breed = breed

    # Overriding the 'sound' method
    def sound(self):
        return "Woof Woof"

    # Overloading 'info' method by adding a second argument
    def info(self, detailed=False):
        if detailed:
            return f"Name: {self.name}, Breed: {self.breed}"
        return super().info()


class Cat(Animal):
    """Derived class to represent a Cat, inheriting from Animal."""
    def __init__(self, name, color):
        super().__init__(name)  # Call the parent class initializer
        self.color = color

    # Overriding the 'sound' method
    def sound(self):
        return "Meow"

    # Overloading 'info' method by adding a second argument
    def info(self, detailed=False):
        if detailed:
            return f"Name: {self.name}, Color: {self.color}"
        return super().info()


# Main program to demonstrate the features
if __name__ == "__main__":
    # Base class object
    generic_animal = Animal("GenericAnimal")
    print("Animal Sound:", generic_animal.sound())
    print("Animal Info:", generic_animal.info())

    # Derived class object (Dog)
    dog = Dog("Buddy", "Golden Retriever")
    print("\nDog Sound:", dog.sound())  # Overriding
    print("Dog Info (Simple):", dog.info())  # Overloading
    print("Dog Info (Detailed):", dog.info(detailed=True))  # Overloading

    # Derived class object (Cat)
    cat = Cat("Whiskers", "White")
    print("\nCat Sound:", cat.sound())  # Overriding
    print("Cat Info (Simple):", cat.info())  # Overloading















// Base class
class Shape {
    // Attribute
    String name;

    // Constructor
    public Shape(String name) {
        this.name = name;
    }

    // Method to calculate area (to be overridden)
    public double area() {
        System.out.println("Area calculation is not defined for shape.");
        return 0;
    }

    // Method to describe the shape (demonstrates overloading)
    public String description() {
        return "Shape: " + name;
    }

    public String description(boolean detailed) {
        if (detailed) {
            return "Detailed description is not available for this shape.";
        }
        return description();
    }
}

// Derived class: Rectangle
class Rectangle extends Shape {
    // Attributes specific to Rectangle
    double length;
    double width;

    // Constructor
    public Rectangle(String name, double length, double width) {
        super(name); // Call the base class constructor
        this.length = length;
        this.width = width;
    }

    // Override the area method
    @Override
    public double area() {
        return length * width;
    }

    // Overload the description method
    @Override
    public String description(boolean detailed) {
        if (detailed) {
            return "Shape: " + name + ", Length: " + length + ", Width: " + width + ", Area: " + area();
        }
        return super.description();
    }
}

// Derived class: Circle
class Circle extends Shape {
    // Attribute specific to Circle
    double radius;

    // Constructor
    public Circle(String name, double radius) {
        super(name); // Call the base class constructor
        this.radius = radius;
    }

    // Override the area method
    @Override
    public double area() {
        return Math.PI * radius * radius;
    }

    // Overload the description method
    @Override
    public String description(boolean detailed) {
        if (detailed) {
            return "Shape: " + name + ", Radius: " + radius + ", Area: " + area();
        }
        return super.description();
    }
}

// Main class to demonstrate Inheritance, Overloading, and Overriding
public class InheritanceOverloadingOverriding {
    public static void main(String[] args) {
        // Base class object
        Shape genericShape = new Shape("Generic Shape");
        System.out.println(genericShape.description());
        System.out.println("Area: " + genericShape.area());

        // Derived class object: Rectangle
        Rectangle rectangle = new Rectangle("Rectangle", 10, 5);
        System.out.println("\n" + rectangle.description());
        System.out.println(rectangle.description(true));
        System.out.println("Area: " + rectangle.area());

        // Derived class object: Circle
        Circle circle = new Circle("Circle", 7);
        System.out.println("\n" + circle.description());
        System.out.println(circle.description(true));
        System.out.println("Area: " + circle.area());
    }
}







javac InheritanceOverloadingOverriding.java
java InheritanceOverloadingOverriding







    
    print("Cat Info (Detailed):", cat.info(detailed=True))  # Overloading
