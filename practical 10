import threading

# Custom exception class for database errors
class DatabaseException(Exception):
    def __init__(self, message):
        super().__init__(message)

# Mock database operations class
class MockDatabaseOperations:
    def connect(self, url, username, password):
        if url == "mock":
            print("Mock database connected successfully!")
        else:
            raise DatabaseException("Failed to connect to the database: Simulated connection error")

    def execute_query(self, query):
        if query.lower() == "select * from users":
            print("Mock query executed successfully! Results:")
            print("ID: 1, Name: Alice")
            print("ID: 2, Name: Bob")
            print("ID: 3, Name: Charlie")
        else:
            raise DatabaseException("Error while executing query: Simulated query error")

    def close(self):
        print("Mock database connection closed.")

# Multithreading task class
class MultithreadingTask(threading.Thread):
    def __init__(self, task_name):
        super().__init__()
        self.task_name = task_name

    def run(self):
        try:
            print(f"{self.task_name} is starting.")
            # Simulate some work with a delay
            threading.Event().wait(2)  # Equivalent to time.sleep(2)
            print(f"{self.task_name} has completed.")
        except Exception as e:
            print(f"Error in {self.task_name}: {e}")

# Main function to demonstrate exception handling, multithreading, and mocked database operations
def main():
    # Exception Handling Example
    try:
        print("Starting database operations...")
        db_ops = MockDatabaseOperations()

        # Simulate database connection with mock parameters
        db_ops.connect(url="mock", username="mockUser", password="mockPassword")
        db_ops.execute_query("SELECT * FROM users")
        db_ops.close()
    except DatabaseException as e:
        print(f"Database error occurred: {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

    # Multithreading Example
    print("\nStarting multithreading tasks...")
    task1 = MultithreadingTask("Task 1")
    task2 = MultithreadingTask("Task 2")
    task3 = MultithreadingTask("Task 3")

    # Start threads
    task1.start()
    task2.start()
    task3.start()

    # Wait for all threads to complete
    task1.join()
    task2.join()
    task3.join()

    print("Program completed!")

if __name__ == "__main__":
    main()






// Mock Database Operations with Exception Handling and Multithreading
class MockDatabaseOperations {
    // Simulate connecting to the database
    public void connect(String url, String username, String password) throws DatabaseException {
        if (url.equals("mock")) {
            System.out.println("Mock database connected successfully!");
        } else {
            throw new DatabaseException("Failed to connect to the database: Simulated connection error");
        }
    }

    // Simulate executing a query
    public void executeQuery(String query) throws DatabaseException {
        if (query.equalsIgnoreCase("SELECT * FROM users")) {
            System.out.println("Mock query executed successfully! Results:");
            System.out.println("ID: 1, Name: Alice");
            System.out.println("ID: 2, Name: Bob");
            System.out.println("ID: 3, Name: Charlie");
        } else {
            throw new DatabaseException("Error while executing query: Simulated query error");
        }
    }

    // Simulate closing the connection
    public void close() {
        System.out.println("Mock database connection closed.");
    }
}

// Multithreading task
class MultithreadingTask extends Thread {
    private String taskName;

    public MultithreadingTask(String taskName) {
        this.taskName = taskName;
    }

    @Override
    public void run() {
        try {
            System.out.println(taskName + " is starting.");
            Thread.sleep(2000); // Simulate some work
            System.out.println(taskName + " has completed.");
        } catch (InterruptedException e) {
            System.err.println(taskName + " was interrupted: " + e.getMessage());
        }
    }
}

// Main class to demonstrate Exception Handling, Multithreading, and Mocked Database Operations
public class MockExceptionMultithreadingDatabase {
    public static void main(String[] args) {
        // Exception Handling Example
        try {
            System.out.println("Starting database operations...");
            MockDatabaseOperations dbOps = new MockDatabaseOperations();

            // Use mock parameters to simulate database connection
            String url = "mock"; // Mock database URL
            String username = "mockUser";
            String password = "mockPassword";

            dbOps.connect(url, username, password);
            dbOps.executeQuery("SELECT * FROM users");
            dbOps.close();
        } catch (DatabaseException e) {
            System.err.println("Database error occurred: " + e.getMessage());
        } catch (Exception e) {
            System.err.println("An unexpected error occurred: " + e.getMessage());
        }

        // Multithreading Example
        System.out.println("\nStarting multithreading tasks...");
        MultithreadingTask task1 = new MultithreadingTask("Task 1");
        MultithreadingTask task2 = new MultithreadingTask("Task 2");
        MultithreadingTask task3 = new MultithreadingTask("Task 3");

        task1.start();
        task2.start();
        task3.start();

        try {
            // Wait for all threads to finish
            task1.join();
            task2.join();
            task3.join();
        } catch (InterruptedException e) {
            System.err.println("Main thread was interrupted: " + e.getMessage());
        }

        System.out.println("Program completed!");
    }
}

run:javac MockExceptionMultithreadingDatabase.java
 MockExceptionMultithreadingDatabase.java
