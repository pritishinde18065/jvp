import math

class QuadraticEquationSolver:
    @staticmethod
    def findRoots(a, b, c):
        """
        Finds the roots of the quadratic equation ax^2 + bx + c = 0.

        Args:
            a (float): Coefficient of x^2
            b (float): Coefficient of x
            c (float): Constant term

        Returns:
            tuple: A tuple containing two roots of the quadratic equation.
                   If the roots are complex, they will be returned as complex numbers.
        """
        if a == 0:
            raise ValueError("The coefficient 'a' cannot be 0 for a quadratic equation.")
        
        # Calculate the discriminant
        discriminant = b**2 - 4*a*c
        
        # Check for real or complex roots
        if discriminant >= 0:
            # Real roots
            root1 = (-b + math.sqrt(discriminant)) / (2 * a)
            root2 = (-b - math.sqrt(discriminant)) / (2 * a)
        else:
            # Complex roots
            realPart = -b / (2 * a)
            imaginaryPart = math.sqrt(-discriminant) / (2 * a)
            root1 = complex(realPart, imaginaryPart)
            root2 = complex(realPart, -imaginaryPart)
        
        return root1, root2


# Example usage
if __name__ == "__main__":
    solver = QuadraticEquationSolver()
    
    # Coefficients of the quadratic equation
    a = 2
    b = -5
    c = -3

    try:
        roots = solver.findRoots(a, b, c)
        print(f"The roots of the quadratic equation {a}x^2 + {b}x + {c} = 0 are:")
        print(f"Root 1: {roots[0]}")
        print(f"Root 2: {roots[1]}")
    except ValueError as e:
        print(e)












import java.util.Scanner;

public class QuadraticEquationSolver {
    /**
     * Finds the roots of a quadratic equation of the form ax^2 + bx + c = 0.
     *
     * @param a Coefficient of x^2
     * @param b Coefficient of x
     * @param c Constant term
     * @return A string representation of the roots of the quadratic equation.
     */
    public static String findRoots(double a, double b, double c) {
        if (a == 0) {
            throw new IllegalArgumentException("Coefficient 'a' cannot be zero for a quadratic equation.");
        }

        // Calculate the discriminant: b^2 - 4ac
        double discriminant = Math.pow(b, 2) - 4 * a * c;

        if (discriminant > 0) {
            // Two distinct real roots
            double root1 = (-b + Math.sqrt(discriminant)) / (2 * a);
            double root2 = (-b - Math.sqrt(discriminant)) / (2 * a);
            return "Root 1: " + root1 + ", Root 2: " + root2;
        } else if (discriminant == 0) {
            // One repeated real root
            double root = -b / (2 * a);
            return "Root: " + root + " (repeated)";
        } else {
            // Complex roots
            double realPart = -b / (2 * a);
            double imaginaryPart = Math.sqrt(-discriminant) / (2 * a);
            return "Root 1: " + realPart + " + " + imaginaryPart + "i, Root 2: " + realPart + " - " + imaginaryPart + "i";
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Solve Quadratic Equation of the form ax^2 + bx + c = 0");

        try {
            // Take input from the user
            System.out.print("Enter the coefficient a: ");
            double a = scanner.nextDouble();

            System.out.print("Enter the coefficient b: ");
            double b = scanner.nextDouble();

            System.out.print("Enter the constant c: ");
            double c = scanner.nextDouble();

            // Find and display the roots
            String result = findRoots(a, b, c);
            System.out.println("The roots of the equation " + a + "x^2 + (" + b + ")x + (" + c + ") = 0 are:");
            System.out.println(result);
        } catch (IllegalArgumentException e) {
            System.out.println("Error: " + e.getMessage());
        } catch (Exception e) {
            System.out.println("An unexpected error occurred: " + e.getMessage());
        } finally {
            scanner.close();
        }
    }
}

run:javac QuadraticEquationSolver .java
java QuadraticEquationSolver
